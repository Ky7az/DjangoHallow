from django.test import TestCase

from HallowPentest.models import (
    Action,
    Attacker,
    Credential,
    Parameter,
    Phase,
    Port,
    Service,
    Target,
    TargetService,
    Task,
    Tool,
    Vulnerability
)


class AttackerModelTestCase(TestCase):

    def setUp(self):
        Attacker.objects.create(name='Attacker', slug='attacker', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')

    def test_string_method(self):
        attacker = Attacker.objects.get(slug='attacker')
        self.assertEqual(str(attacker), f'{attacker.name}')


class PortModelTestCase(TestCase):

    def setUp(self):
        Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')

    def test_natural_key(self):
        port = Port.objects.get(slug='1337-tcp')
        self.assertEqual(Port.objects.get_by_natural_key('1337-tcp'), port)
        self.assertEqual(port.natural_key(), (port.slug,))

    def test_string_method(self):
        port = Port.objects.get(slug='1337-tcp')
        self.assertEqual(str(port), f'{port.number}:{port.protocol}')


class ServiceModelTestCase(TestCase):

    def setUp(self):
        Service.objects.create(name='Service', slug='service')

    def test_natural_key(self):
        service = Service.objects.get(slug='service')
        self.assertEqual(Service.objects.get_by_natural_key('service'), service)
        self.assertEqual(service.natural_key(), (service.slug,))

    def test_string_method(self):
        service = Service.objects.get(slug='service')
        self.assertEqual(str(service), f'{service.name}')


class TargetModelTestCase(TestCase):

    def setUp(self):
        Target.objects.create(name='Target', slug='target', host='127.0.0.1')

    def test_string_method(self):
        target = Target.objects.get(slug='target')
        self.assertEqual(str(target), f'{target.name}')


class TargetServiceModelTestCase(TestCase):

    def setUp(self):
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        service = Service.objects.create(name='Service', slug='service')
        port = Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')
        TargetService.objects.create(target=target, service=service, port=port)

    def test_string_method(self):
        target_service = TargetService.objects.get()
        self.assertEqual(str(target_service), f'{target_service.target} - {target_service.service} ({target_service.port})')


class CredentialModelTestCase(TestCase):

    def setUp(self):
        Credential.objects.create(cred_type='plaintext', username='username', password='password')

    def test_string_method(self):
        credential = Credential.objects.get()
        self.assertEqual(str(credential), f"Target = Global / Service = Global / {credential.username} ({credential.cred_type})")


class PhaseModelTestCase(TestCase):

    def setUp(self):
        Phase.objects.create(name='Phase', slug='phase', sequence=1)

    def test_natural_key(self):
        phase = Phase.objects.get(slug='phase')
        self.assertEqual(Phase.objects.get_by_natural_key('phase'), phase)
        self.assertEqual(phase.natural_key(), (phase.slug,))

    def test_string_method(self):
        phase = Phase.objects.get(slug='phase')
        self.assertEqual(str(phase), f'{phase.name}')


class VulnerabilityModelTestCase(TestCase):

    def setUp(self):
        Vulnerability.objects.create(name='Vulnerability', slug='vulnerability')

    def test_natural_key(self):
        vulnerability = Vulnerability.objects.get(slug='vulnerability')
        self.assertEqual(Vulnerability.objects.get_by_natural_key('vulnerability'), vulnerability)
        self.assertEqual(vulnerability.natural_key(), (vulnerability.slug,))

    def test_string_method(self):
        vulnerability = Vulnerability.objects.get(slug='vulnerability')
        self.assertEqual(str(vulnerability), f'{vulnerability.name}')


class ToolModelTestCase(TestCase):

    def setUp(self):
        Tool.objects.create(name='Tool', slug='tool')

    def test_natural_key(self):
        tool = Tool.objects.get(slug='tool')
        self.assertEqual(Tool.objects.get_by_natural_key('tool'), tool)
        self.assertEqual(tool.natural_key(), (tool.slug,))

    def test_string_method(self):
        tool = Tool.objects.get(slug='tool')
        self.assertEqual(str(tool), f'{tool.name}')


class ParameterModelTestCase(TestCase):

    def setUp(self):
        Parameter.objects.create(name='Parameter', key='key', value='value')

    def test_string_method(self):
        parameter = Parameter.objects.get()
        self.assertEqual(str(parameter), f"Target = Global / Tool = Global / {parameter.key}")


class ActionModelTestCase(TestCase):

    def setUp(self):
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        Action.objects.create(name='Action', phase=phase, tool=tool, command='cmd', priority=1)

    def test_string_method(self):
        action = Action.objects.get()
        self.assertEqual(str(action), f'{action.name}')


class TaskModelTestCase(TestCase):

    def setUp(self):
        attacker = Attacker.objects.create(name='Attacker', slug='attacker', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        action = Action.objects.create(name='Action', phase=phase, tool=tool, command='cmd', priority=1)
        Task.objects.create(attacker=attacker, target=target, action=action, command='cmd')

    def test_string_method(self):
        task = Task.objects.get()
        self.assertEqual(str(task), f'{task.attacker} -> {task.target} : {task.action}')
