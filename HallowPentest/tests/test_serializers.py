from collections import OrderedDict

from django.test import TestCase
from django.utils.timezone import localtime

from HallowPentest.models import (
    Action,
    Attacker,
    Credential,
    Parameter,
    Phase,
    Port,
    Service,
    Target,
    TargetService,
    Task,
    Tool,
    Vulnerability
)
from HallowPentest.serializers import (
    ActionSerializer,
    AttackerSerializer,
    CredentialSerializer,
    ParameterSerializer,
    PhaseSerializer,
    PortSerializer,
    ServiceSerializer,
    TargetSerializer,
    TargetServiceSerializer,
    TaskSerializer,
    ToolSerializer,
    VulnerabilitySerializer
)


class AttackerSerializerTestCase(TestCase):

    def test_attacker(self):
        attacker = Attacker.objects.create(name='Attacker', slug='attacker', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
        expected = {
            'id': attacker.id,
            'name': 'Attacker',
            'slug': 'attacker',
            'host': '127.0.0.1',
            'ssh_port': 22,
            'ssh_username': 'username',
            'ssh_pkey': 'pkey'
        }
        serializer = AttackerSerializer(attacker)
        self.assertEquals(serializer.data, expected)


class PortSerializerTestCase(TestCase):

    def test_port(self):
        port = Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')
        expected = {
            'id': port.id,
            'slug': '1337-tcp',
            'number': 1337,
            'protocol': 'tcp'
        }
        serializer = PortSerializer(port)
        self.assertEquals(serializer.data, expected)


class ServiceSerializerTestCase(TestCase):

    def test_service(self):
        service = Service.objects.create(name='Service', slug='service')
        expected = {
            'id': service.id,
            'name': 'Service',
            'slug': 'service',
            'default_ports': []
        }
        serializer = ServiceSerializer(service)
        self.assertEquals(serializer.data, expected)


class TargetSerializerTestCase(TestCase):

    def test_target(self):
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        expected = {
            'id': target.id,
            'name': 'Target',
            'slug': 'target',
            'host': '127.0.0.1',
            'path': ''
        }
        serializer = TargetSerializer(target)
        self.assertEquals(serializer.data, expected)


class TargetServiceSerializerTestCase(TestCase):

    def test_target_service(self):
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        service = Service.objects.create(name='Service', slug='service')
        port = Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')
        target_service = TargetService.objects.create(target=target, service=service, port=port)
        expected = {
            'id': target_service.id,
            'target': OrderedDict([('id', target.id), ('name', 'Target'), ('slug', 'target'), ('host', '127.0.0.1'), ('path', '')]),
            'service': OrderedDict([('id', service.id), ('name', 'Service'), ('slug', 'service'), ('default_ports', [])]),
            'port': OrderedDict([('id', port.id), ('slug', '1337-tcp'), ('number', 1337), ('protocol', 'tcp')])
        }
        serializer = TargetServiceSerializer(target_service)
        self.assertEquals(serializer.data, expected)


class CredentialSerializerTestCase(TestCase):

    def test_credential(self):
        credential = Credential.objects.create(cred_type='plaintext', username='username', password='password')
        expected = {
            'id': credential.id,
            'target': None,
            'service': None,
            'cred_type': 'plaintext',
            'username': 'username',
            'password': 'password'
        }
        serializer = CredentialSerializer(credential)
        self.assertEquals(serializer.data, expected)


class PhaseSerializerTestCase(TestCase):

    def test_phase(self):
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        expected = {
            'id': phase.id,
            'name': 'Phase',
            'slug': 'phase',
            'sequence': 1
        }
        serializer = PhaseSerializer(phase)
        self.assertEquals(serializer.data, expected)


class VulnerabilitySerializerTestCase(TestCase):

    def test_vulnerability(self):
        vulnerability = Vulnerability.objects.create(name='Vulnerability', slug='vulnerability')
        expected = {
            'id': vulnerability.id,
            'name': 'Vulnerability',
            'slug': 'vulnerability'
        }
        serializer = VulnerabilitySerializer(vulnerability)
        self.assertEquals(serializer.data, expected)


class ToolSerializerTestCase(TestCase):

    def test_tool(self):
        tool = Tool.objects.create(name='Tool', slug='tool')
        expected = {
            'id': tool.id,
            'name': 'Tool',
            'slug': 'tool',
            'url': ''
        }
        serializer = ToolSerializer(tool)
        self.assertEquals(serializer.data, expected)


class ParameterSerializerTestCase(TestCase):

    def test_parameter(self):
        parameter = Parameter.objects.create(name='Parameter', key='key', value='value')
        expected = {
            'id': parameter.id,
            'target': None,
            'tool': None,
            'name': 'Parameter',
            'key': 'key',
            'value': 'value'
        }
        serializer = ParameterSerializer(parameter)
        self.assertEquals(serializer.data, expected)


class ActionSerializerTestCase(TestCase):

    def test_action(self):
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        action = Action.objects.create(name='Action', phase=phase, tool=tool, command='cmd', priority=1)
        expected = {
            'id': action.id,
            'name': 'Action',
            'phase': OrderedDict([('id', phase.id), ('name', 'Phase'), ('slug', 'phase'), ('sequence', 1)]),
            'service': None,
            'vulnerability': None,
            'tool': OrderedDict([('id', phase.id), ('name', 'Tool'), ('slug', 'tool'), ('url', '')]),
            'auth_needed': False,
            'command': 'cmd',
            'priority': 1
        }
        serializer = ActionSerializer(action)
        self.assertEquals(serializer.data, expected)


class TaskSerializerTestCase(TestCase):

    def test_task(self):
        attacker = Attacker.objects.create(name='Attacker', slug='attacker', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        action = Action.objects.create(name='Action', phase=phase, tool=tool, command='cmd', priority=1)
        task = Task.objects.create(attacker=attacker, target=target, action=action, command='cmd')
        expected = {
            'id': task.id,
            'create_date': localtime(task.create_date).isoformat().replace('+00:00', 'Z'),
            'write_date': localtime(task.write_date).isoformat().replace('+00:00', 'Z'),
            'attacker': OrderedDict([('id', attacker.id), ('name', 'Attacker'), ('slug', 'attacker'), ('host', '127.0.0.1'), ('ssh_port', 22), ('ssh_username', 'username'), ('ssh_pkey', 'pkey')]),
            'target': OrderedDict([('id', target.id), ('name', 'Target'), ('slug', 'target'), ('host', '127.0.0.1'), ('path', '')]),
            'target_service': None,
            'credential': None,
            'action': OrderedDict([('id', action.id), ('name', 'Action'), ('phase', OrderedDict([('id', phase.id), ('name', 'Phase'), ('slug', 'phase'), ('sequence', 1)])), ('service', None), ('vulnerability', None), ('tool', OrderedDict([('id', tool.id), ('name', 'Tool'), ('slug', 'tool'), ('url', '')])), ('auth_needed', False), ('command', 'cmd'), ('priority', 1)]),
            'command': 'cmd'
        }
        serializer = TaskSerializer(task)
        self.assertEquals(serializer.data, expected)
