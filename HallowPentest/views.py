from rest_framework import viewsets, status
from rest_framework.authentication import TokenAuthentication
from rest_framework.decorators import action
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response

from celery.result import AsyncResult

from HallowPentest.models import Attacker, Port, Service, Target, Phase, Tool, Action, Task
from HallowPentest.serializers import AttackerSerializer, PortSerializer, ServiceSerializer, TargetSerializer, PhaseSerializer, ToolSerializer, ActionSerializer, TaskSerializer


class AttackerViewSet(viewsets.ModelViewSet):

    queryset = Attacker.objects.all()
    serializer_class = AttackerSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class PortViewSet(viewsets.ModelViewSet):

    queryset = Port.objects.all()
    serializer_class = PortSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class ServiceViewSet(viewsets.ModelViewSet):

    queryset = Service.objects.all()
    serializer_class = ServiceSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class TargetViewSet(viewsets.ModelViewSet):

    queryset = Target.objects.all()
    serializer_class = TargetSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class PhaseViewSet(viewsets.ModelViewSet):

    queryset = Phase.objects.all()
    serializer_class = PhaseSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class ToolViewSet(viewsets.ModelViewSet):

    queryset = Tool.objects.all()
    serializer_class = ToolSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'slug'


class ActionViewSet(viewsets.ModelViewSet):

    queryset = Action.objects.all()
    serializer_class = ActionSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'id'


class TaskViewSet(viewsets.ModelViewSet):

    queryset = Task.objects.all()
    serializer_class = TaskSerializer
    authentication_classes = (TokenAuthentication, )
    permission_classes = (IsAuthenticated, )
    lookup_field = 'id'

    @action(methods=["GET"], detail=False, permission_classes=(IsAuthenticated,))
    def tasks_results(self, request):
        tasks = Task.objects.all()
        task_ret = []
        for task in tasks:
            res = AsyncResult(task.celery_task_id)
            task_ret.append({
                'celery_task_id': res.id,
                'task_id': task.id,
                'state': res.state,
                'output': task.output
            })
        return Response(task_ret, status=status.HTTP_200_OK)
