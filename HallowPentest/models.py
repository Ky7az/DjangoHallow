from django.db import models


## Attacker ##

class Attacker(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    host = models.CharField(max_length=256)
    ssh_port = models.IntegerField()
    ssh_username = models.CharField(max_length=64)
    ssh_pkey = models.TextField()

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['name']


## Port ##

class Port(models.Model):

    id = models.AutoField(primary_key=True)
    slug = models.SlugField(max_length=8, unique=True)
    number = models.IntegerField()
    protocol = models.CharField(max_length=3, choices=[('tcp', 'TCP'), ('udp', 'UDP')])

    def __str__(self):
        return '{}:{}'.format(self.number, self.protocol)

    class Meta:
        ordering = ['number']


## Service ##

class Service(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    default_ports = models.ManyToManyField(Port)

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['name']


## Target ##

class Target(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    host = models.CharField(max_length=64)
    services = models.ManyToManyField(Service, through='TargetService')

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['name']


## Target Service ##

class TargetService(models.Model):

    id = models.AutoField(primary_key=True)
    target = models.ForeignKey(Target, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    port = models.ForeignKey(Port, on_delete=models.CASCADE)

    def __str__(self):
        return '{} - {} ({})'.format(self.target, self.service, self.port)


## Phase ##

class Phase(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    sequence = models.IntegerField()

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['sequence']


## Tool ##

class Tool(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    url = models.CharField(max_length=256, blank=True)

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['name']


## Action ##

class Action(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    phase = models.ForeignKey(Phase, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, blank=True, null=True)
    tool = models.ForeignKey(Tool, on_delete=models.CASCADE)
    command = models.TextField()
    priority = models.IntegerField()

    def __str__(self):
        return '{}'.format(self.name)

    class Meta:
        ordering = ['name']


## Task ##

class Task(models.Model):

    STATUS = (
        ('pending', 'Pending'), 
        ('started', 'Started'), 
        ('success', 'Success'), 
        ('failure', 'Failure'), 
        ('retry', 'Retry'), 
        ('revoked', 'Revoked')
    )

    id = models.AutoField(primary_key=True)
    create_date = models.DateTimeField(auto_now_add=True)
    write_date = models.DateTimeField(auto_now=True)
    attacker = models.ForeignKey(Attacker, on_delete=models.CASCADE)
    target = models.ForeignKey(Target, on_delete=models.CASCADE)
    action = models.ForeignKey(Action, on_delete=models.CASCADE)
    command = models.TextField()
    output = models.TextField(blank=True)
    celery_task_id = models.CharField(max_length=64, blank=True)

    def __str__(self):
        return '{} -> {} : {}'.format(self.attacker, self.target, self.action)

    class Meta:
        ordering = ['-create_date']
