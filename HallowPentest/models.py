from django.db import models


class Attacker(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    host = models.CharField(max_length=256)
    ssh_port = models.IntegerField()
    ssh_username = models.CharField(max_length=64)
    ssh_pkey = models.TextField()

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['name']


class PortManager(models.Manager):

    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Port(models.Model):

    id = models.AutoField(primary_key=True)
    slug = models.SlugField(max_length=9, unique=True)
    number = models.IntegerField()
    protocol = models.CharField(max_length=3, choices=[('tcp', 'TCP'), ('udp', 'UDP')])

    objects = PortManager()

    def natural_key(self):
        return (self.slug,)

    def __str__(self):
        return f'{self.number}:{self.protocol}'

    class Meta:
        ordering = ['number']


class ServiceManager(models.Manager):

    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Service(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    default_ports = models.ManyToManyField(Port)

    objects = ServiceManager()

    def natural_key(self):
        return (self.slug,)

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['name']


class Target(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    host = models.CharField(max_length=64)
    path = models.CharField(max_length=256, blank=True)
    services = models.ManyToManyField(Service, through='TargetService', blank=True)

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['name']


class TargetService(models.Model):

    id = models.AutoField(primary_key=True)
    target = models.ForeignKey(Target, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE)
    port = models.ForeignKey(Port, on_delete=models.CASCADE)

    def __str__(self):
        return f'{self.target} - {self.service} ({self.port})'


class Credential(models.Model):

    CRED_TYPES = (
        ('plaintext', 'Plaintext'),
        ('ssh_pkey', 'SSH Private Key'),
        ('ntlm_hash', 'NTLM Hash'),
        ('hash', 'Hash')
    )

    id = models.AutoField(primary_key=True)
    cred_type = models.CharField(max_length=9, choices=CRED_TYPES, default='plaintext')
    username = models.CharField(max_length=64)
    password = models.TextField(blank=True)
    target = models.ForeignKey(Target, on_delete=models.CASCADE, blank=True, null=True)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, blank=True, null=True)

    def __str__(self):
        return f"Target = {self.target or 'Global'} / Service = {self.service or 'Global'} / {self.username} ({self.cred_type})"

    class Meta:
        ordering = ['username']
        unique_together = ['username', 'target', 'service']


class PhaseManager(models.Manager):

    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Phase(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    sequence = models.IntegerField()

    objects = PhaseManager()

    def natural_key(self):
        return (self.slug,)

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['sequence']


class VulnerabilityManager(models.Manager):

    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Vulnerability(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)

    objects = VulnerabilityManager()

    def natural_key(self):
        return (self.slug,)

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['name']


class ToolManager(models.Manager):

    def get_by_natural_key(self, slug):
        return self.get(slug=slug)


class Tool(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    slug = models.SlugField(max_length=64, unique=True)
    url = models.CharField(max_length=256, blank=True)

    objects = ToolManager()

    def natural_key(self):
        return (self.slug,)

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['name']


class Parameter(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64)
    key = models.CharField(max_length=64)
    value = models.TextField(blank=True)
    target = models.ForeignKey(Target, on_delete=models.CASCADE, blank=True, null=True)
    tool = models.ForeignKey(Tool, on_delete=models.CASCADE, blank=True, null=True)

    def __str__(self):
        return f"Target = {self.target or 'Global'} / Tool = {self.tool or 'Global'} / {self.key}"

    class Meta:
        ordering = ['key']
        unique_together = ['key', 'target', 'tool']


class Action(models.Model):

    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=64, unique=True)
    phase = models.ForeignKey(Phase, on_delete=models.CASCADE)
    service = models.ForeignKey(Service, on_delete=models.CASCADE, blank=True, null=True)
    vulnerability = models.ForeignKey(Vulnerability, on_delete=models.SET_NULL, blank=True, null=True)
    tool = models.ForeignKey(Tool, on_delete=models.CASCADE)
    auth_needed = models.BooleanField(default=False)
    command = models.TextField()
    priority = models.IntegerField()

    def __str__(self):
        return f'{self.name}'

    class Meta:
        ordering = ['priority', 'name']


class Task(models.Model):

    STATUS = (
        ('pending', 'Pending'),
        ('started', 'Started'),
        ('success', 'Success'),
        ('failure', 'Failure'),
        ('retry', 'Retry'),
        ('revoked', 'Revoked')
    )

    id = models.AutoField(primary_key=True)
    create_date = models.DateTimeField(auto_now_add=True)
    write_date = models.DateTimeField(auto_now=True)
    attacker = models.ForeignKey(Attacker, on_delete=models.CASCADE)
    target = models.ForeignKey(Target, on_delete=models.CASCADE)
    target_service = models.ForeignKey(TargetService, on_delete=models.CASCADE, blank=True, null=True)
    credential = models.ForeignKey(Credential, on_delete=models.CASCADE, blank=True, null=True)
    action = models.ForeignKey(Action, on_delete=models.CASCADE)
    command = models.TextField()
    output = models.TextField(blank=True)
    celery_task_id = models.CharField(max_length=64, blank=True)

    def __str__(self):
        return f'{self.attacker} -> {self.target} : {self.action}'

    class Meta:
        ordering = ['-create_date']
