from django.core.exceptions import ObjectDoesNotExist
from rest_framework import serializers

from HallowPentest.models import Attacker, Port, Service, TargetService, Target, Phase, Tool, Action, Task
from HallowPentest.tasks import run_task


class AttackerSerializer(serializers.ModelSerializer):

    class Meta:
        model = Attacker
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'ssh_port',
                  'ssh_username',
                  'ssh_pkey')


class PortSerializer(serializers.ModelSerializer):

    class Meta:
        model = Port
        fields = ('id',
                  'slug',
                  'number',
                  'protocol')


class ServiceSerializer(serializers.ModelSerializer):

    default_ports = PortSerializer(many=True)

    class Meta:
        model = Service
        fields = ('id',
                  'name',
                  'slug',
                  'default_ports')


class TargetServiceSerializer(serializers.ModelSerializer):

    service = ServiceSerializer(read_only=True)
    port = PortSerializer(read_only=True)

    class Meta:
        model = TargetService
        fields = ('id',
                  'target',
                  'service',
                  'service_id',
                  'port',
                  'port_id')

        extra_kwargs = {
            'service_id': {'source': 'service', 'write_only': True},
            'port_id': {'source': 'port', 'write_only': True}
        }


class TargetSerializer(serializers.ModelSerializer):

    services = TargetServiceSerializer(source='targetservice_set', many=True, required=False)

    class Meta:
        model = Target
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'services')

    def update(self, instance, validated_data):
        instance.name = validated_data.get('name', instance.name)
        instance.slug = validated_data.get('slug', instance.slug)
        instance.host = validated_data.get('host', instance.host)

        # Services
        if 'targetservice_set' in validated_data:
            updated_services = validated_data.get('targetservice_set')
            target_service_ids = []

            for service_data in updated_services:
                service_data['target'] = instance
                try:
                    target_service = TargetService.objects.get(target=service_data['target'], service=service_data['service'], port=service_data['port'])
                except ObjectDoesNotExist:
                    target_service = TargetService.objects.create(**service_data)

                target_service_ids.append(target_service.id)

            deleted_services = TargetService.objects.filter(target=instance).exclude(id__in=target_service_ids)
            deleted_services.delete()

        instance.save()
        return instance


class PhaseSerializer(serializers.ModelSerializer):

    class Meta:
        model = Phase
        fields = ('id',
                  'name',
                  'slug',
                  'sequence')


class ToolSerializer(serializers.ModelSerializer):

    class Meta:
        model = Tool
        fields = ('id',
                  'name',
                  'slug',
                  'url')


class ActionSerializer(serializers.ModelSerializer):

    phase = PhaseSerializer()
    service = ServiceSerializer()
    tool = ToolSerializer()

    class Meta:
        model = Action
        fields = ('id',
                  'name',
                  'phase',
                  'service',
                  'tool',
                  'command',
                  'priority')


class TaskSerializer(serializers.ModelSerializer):

    attacker = AttackerSerializer(read_only=True)
    target = TargetSerializer(read_only=True)
    action = ActionSerializer(read_only=True)

    class Meta:
        model = Task
        fields = ('id',
                  'create_date',
                  'write_date',
                  'attacker',
                  'attacker_id',
                  'target',
                  'target_id',             
                  'action',
                  'action_id',
                  'command')

        extra_kwargs = {
            'attacker_id': {'source': 'attacker', 'write_only': True},
            'target_id': {'source': 'target', 'write_only': True},
            'action_id': {'source': 'action', 'write_only': True},
            'command': {'required': False}
        }

    def create(self, validated_data):
        target = validated_data['target']
        action = validated_data['action']

        if action.service:
            target_service = TargetService.objects.get(target=target, service=action.service)
            port = target_service.port.number
        else:
            port = ''

        validated_data['command'] = action.command.format(host=target.host, port=port)
        task = Task.objects.create(**validated_data)

        res = run_task.delay(task.id)
        task.celery_task_id = res.id
        task.save()

        return task
