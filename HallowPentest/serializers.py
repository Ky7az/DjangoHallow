from string import Formatter

from django.core.exceptions import ObjectDoesNotExist
from django.db.models import Q
from rest_framework import serializers

from HallowPentest.models import Attacker, Port, Service, TargetService, Target, Credential, Parameter, Phase, Vulnerability, Tool, Action, Task
from HallowPentest.tasks import run_task


class AttackerSerializer(serializers.ModelSerializer):

    class Meta:
        model = Attacker
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'ssh_port',
                  'ssh_username',
                  'ssh_pkey')


class PortSerializer(serializers.ModelSerializer):

    class Meta:
        model = Port
        fields = ('id',
                  'slug',
                  'number',
                  'protocol')


class ServiceSerializer(serializers.ModelSerializer):

    default_ports = PortSerializer(many=True)

    class Meta:
        model = Service
        fields = ('id',
                  'name',
                  'slug',
                  'default_ports')


class TargetServiceSerializer(serializers.ModelSerializer):

    service = ServiceSerializer(read_only=True)
    port = PortSerializer(read_only=True)

    class Meta:
        model = TargetService
        fields = ('id',
                  'target',
                  'service',
                  'service_id',
                  'port',
                  'port_id')

        extra_kwargs = {
            'service_id': {'source': 'service', 'write_only': True},
            'port_id': {'source': 'port', 'write_only': True}
        }


class TargetSerializer(serializers.ModelSerializer):

    services = TargetServiceSerializer(source='targetservice_set', many=True, required=False)

    class Meta:
        model = Target
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'services')

    def update(self, instance, validated_data):
        instance.name = validated_data.get('name', instance.name)
        instance.slug = validated_data.get('slug', instance.slug)
        instance.host = validated_data.get('host', instance.host)

        # Services
        if 'targetservice_set' in validated_data:
            updated_services = validated_data.get('targetservice_set')
            target_service_ids = []

            for service_data in updated_services:
                service_data['target'] = instance
                try:
                    target_service = TargetService.objects.get(target=service_data['target'], service=service_data['service'], port=service_data['port'])
                except ObjectDoesNotExist:
                    target_service = TargetService.objects.create(**service_data)

                target_service_ids.append(target_service.id)

            deleted_services = TargetService.objects.filter(target=instance).exclude(id__in=target_service_ids)
            deleted_services.delete()

        instance.save()
        return instance


class CredentialSerializer(serializers.ModelSerializer):

    target = TargetSerializer(read_only=True)
    service = ServiceSerializer(read_only=True)

    class Meta:
        model = Credential
        fields = ('id',
                  'target',
                  'target_id',
                  'service',
                  'service_id',
                  'cred_type',
                  'username',
                  'password')

        extra_kwargs = {
            'target_id': {'source': 'target', 'write_only': True},
            'service_id': {'source': 'service', 'write_only': True}
        }


class PhaseSerializer(serializers.ModelSerializer):

    class Meta:
        model = Phase
        fields = ('id',
                  'name',
                  'slug',
                  'sequence')


class VulnerabilitySerializer(serializers.ModelSerializer):

    class Meta:
        model = Vulnerability
        fields = ('id',
                  'name',
                  'slug')


class ToolSerializer(serializers.ModelSerializer):

    class Meta:
        model = Tool
        fields = ('id',
                  'name',
                  'slug',
                  'url')


class ParameterSerializer(serializers.ModelSerializer):

    target = TargetSerializer(read_only=True)
    tool = ToolSerializer(read_only=True)

    class Meta:
        model = Parameter
        fields = ('id',
                  'target',
                  'target_id',
                  'tool',
                  'tool_id',
                  'name',
                  'key',
                  'value')

        extra_kwargs = {
            'target_id': {'source': 'target', 'write_only': True},
            'tool_id': {'source': 'tool', 'write_only': True}
        }


class ActionSerializer(serializers.ModelSerializer):

    phase = PhaseSerializer()
    service = ServiceSerializer()
    vulnerability = VulnerabilitySerializer()
    tool = ToolSerializer()

    class Meta:
        model = Action
        fields = ('id',
                  'name',
                  'phase',
                  'service',
                  'vulnerability',
                  'tool',
                  'auth_needed',
                  'command',
                  'priority')


class TaskSerializer(serializers.ModelSerializer):

    attacker = AttackerSerializer(read_only=True)
    target = TargetSerializer(read_only=True)
    target_service = TargetServiceSerializer(read_only=True)
    credential = CredentialSerializer(read_only=True)
    action = ActionSerializer(read_only=True)

    class Meta:
        model = Task
        fields = ('id',
                  'create_date',
                  'write_date',
                  'attacker',
                  'attacker_id',
                  'target',
                  'target_id',
                  'target_service',
                  'target_service_id',
                  'credential',
                  'credential_id',
                  'action',
                  'action_id',
                  'command')

        extra_kwargs = {
            'attacker_id': {'source': 'attacker', 'write_only': True},
            'target_id': {'source': 'target', 'write_only': True},
            'target_service_id': {'source': 'target_service', 'write_only': True},
            'credential_id': {'source': 'credential', 'write_only': True},
            'action_id': {'source': 'action', 'write_only': True},
            'command': {'required': False}
        }

    def create(self, validated_data):
        target = validated_data['target']
        target_service = validated_data['target_service']
        credential = validated_data['credential']
        action = validated_data['action']

        port = target_service and target_service.port.number or ''
        format_data = {
            'host': target.host,
            'port': port
        }

        if credential:
            format_data.update({
                'username': credential.username,
                'password': credential.password
            })

        action_fnames = [fname for text, fname, spec, conv in Formatter().parse(action.command) if fname not in format_data.keys() and fname is not None]
        for action_fname in action_fnames:
            try:
                param = Parameter.objects.get(key=action_fname, target=target, tool=action.tool)
            except ObjectDoesNotExist:
                try:
                    param = Parameter.objects.get(key=action_fname, target=target, tool__isnull=True)
                except ObjectDoesNotExist:
                    try:
                        param = Parameter.objects.get(key=action_fname, target__isnull=True, tool=action.tool)
                    except ObjectDoesNotExist:
                        try:
                            param = Parameter.objects.get(key=action_fname, target__isnull=True, tool__isnull=True)
                        except ObjectDoesNotExist:
                            raise Exception('Missing parameter "{}"'.format(action_fname))

            format_data[param.key] = param.value

        validated_data['command'] = action.command.format(**format_data)
        task = Task.objects.create(**validated_data)

        res = run_task.delay(task.id)
        task.celery_task_id = res.id
        task.save()

        return task
