from django.db.models import Q
from rest_framework import viewsets, status
from rest_framework.authentication import TokenAuthentication
from rest_framework.decorators import action
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from django_filters.rest_framework import CharFilter, DjangoFilterBackend, FilterSet, ModelChoiceFilter, ModelMultipleChoiceFilter

from celery.result import AsyncResult

from HallowPentest.models import Attacker, Port, Service, Target, TargetService, Credential, Parameter, Phase, Vulnerability, Tool, Action, Task
from HallowPentest.serializers import AttackerSerializer, PortSerializer, ServiceSerializer, TargetSerializer, TargetServiceSerializer, CredentialSerializer, ParameterSerializer, PhaseSerializer, VulnerabilitySerializer, ToolSerializer, ActionSerializer, TaskSerializer
from HallowPentest.tasks import clean_task


class AttackerViewSet(viewsets.ModelViewSet):

    queryset = Attacker.objects.all()
    serializer_class = AttackerSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class PortViewSet(viewsets.ModelViewSet):

    queryset = Port.objects.all()
    serializer_class = PortSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class ServiceViewSet(viewsets.ModelViewSet):

    queryset = Service.objects.all()
    serializer_class = ServiceSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class TargetViewSet(viewsets.ModelViewSet):

    queryset = Target.objects.all()
    serializer_class = TargetSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class TargetServiceViewSet(viewsets.ModelViewSet):

    queryset = TargetService.objects.all()
    serializer_class = TargetServiceSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'id'


class CredentialViewSet(viewsets.ModelViewSet):

    queryset = Credential.objects.all()
    serializer_class = CredentialSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'id'


class ParameterViewSet(viewsets.ModelViewSet):

    queryset = Parameter.objects.all()
    serializer_class = ParameterSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'id'


class PhaseViewSet(viewsets.ModelViewSet):

    queryset = Phase.objects.all()
    serializer_class = PhaseSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class VulnerabilityViewSet(viewsets.ModelViewSet):

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class ToolViewSet(viewsets.ModelViewSet):

    queryset = Tool.objects.all()
    serializer_class = ToolSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'slug'


class ActionViewSet(viewsets.ModelViewSet):

    queryset = Action.objects.all()
    serializer_class = ActionSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    lookup_field = 'id'


class TaskFilter(FilterSet):

    command_or_output = CharFilter(method='filter_command_or_output')
    target = ModelMultipleChoiceFilter(
        field_name='target__slug',
        to_field_name='slug',
        queryset=Target.objects.all()
    )

    def filter_command_or_output(self, queryset, name, value):
        return queryset.filter(Q(command__icontains=value) | Q(output__icontains=value))

    class Meta:
        model = Task
        fields = ['command_or_output', 'target']

class TaskPagination(PageNumberPagination):

    page_size = 20
    page_size_query_param = 'page_size'
    max_page_size = 20
    page_query_param = 'page'

class TaskViewSet(viewsets.ModelViewSet):

    queryset = Task.objects.all()
    serializer_class = TaskSerializer
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)
    filter_backends = [DjangoFilterBackend]
    filterset_class = TaskFilter
    pagination_class = TaskPagination
    lookup_field = 'id'

    def destroy(self, request, pk=None, *args, **kwargs):
        task = self.get_object()
        clean_task.delay(task.attacker.id, task.command)
        return super(TaskViewSet, self).destroy(request, pk, *args, **kwargs)

    @action(methods=["GET"], detail=False, permission_classes=(IsAuthenticated,))
    def tasks_results(self, request):
        tasks = Task.objects.all()
        task_ret = []
        for task in tasks:
            res = AsyncResult(task.celery_task_id)
            task_ret.append({
                'celery_task_id': res.id,
                'task_id': task.id,
                'state': res.state,
                'output': task.output
            })
        return Response(task_ret, status=status.HTTP_200_OK)
