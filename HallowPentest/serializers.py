from rest_framework import serializers

from HallowPentest.models import Attacker, Port, Service, TargetService, Target, Phase, Tool, Action, Task


class AttackerSerializer(serializers.ModelSerializer):

    class Meta:
        model = Attacker
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'ssh_port',
                  'ssh_id_file')


class PortSerializer(serializers.ModelSerializer):

    class Meta:
        model = Port
        fields = ('id',
                  'slug',
                  'number',
                  'protocol')


class ServiceSerializer(serializers.ModelSerializer):

    default_ports = PortSerializer(many=True)

    class Meta:
        model = Service
        fields = ('id',
                  'name',
                  'slug',
                  'default_ports')


class TargetServiceSerializer(serializers.ModelSerializer):

    service = ServiceSerializer()
    port = PortSerializer()

    class Meta:
        model = TargetService
        fields = ('id',
                  'target',
                  'service',
                  'port')


class TargetSerializer(serializers.ModelSerializer):

    services = TargetServiceSerializer(source='targetservice_set', many=True, read_only=True)

    class Meta:
        model = Target
        fields = ('id',
                  'name',
                  'slug',
                  'host',
                  'services')


class PhaseSerializer(serializers.ModelSerializer):

    class Meta:
        model = Phase
        fields = ('id',
                  'name',
                  'slug',
                  'sequence')


class ToolSerializer(serializers.ModelSerializer):

    class Meta:
        model = Tool
        fields = ('id',
                  'name',
                  'slug',
                  'url')


class ActionSerializer(serializers.ModelSerializer):

    phase = PhaseSerializer()
    service = ServiceSerializer()
    tool = ToolSerializer()

    class Meta:
        model = Action
        fields = ('id',
                  'name',
                  'phase',
                  'service',
                  'tool',
                  'command',
                  'priority')


class TaskSerializer(serializers.ModelSerializer):

    attacker = AttackerSerializer(read_only=True)
    target = TargetSerializer(read_only=True)
    action = ActionSerializer(read_only=True)
    status = serializers.CharField(source='get_status_display', read_only=True)

    class Meta:
        model = Task
        fields = ('id',
                  'create_date',
                  'write_date',
                  'attacker',
                  'attacker_id',
                  'target',
                  'target_id',             
                  'action',
                  'action_id',
                  'command',
                  'output',
                  'status')

        extra_kwargs = {
            'attacker_id': {'source': 'attacker', 'write_only': True},
            'target_id': {'source': 'target', 'write_only': True},
            'action_id': {'source': 'action', 'write_only': True},
            'command': {'required': False}
        }

    def create(self, validated_data):
        target = validated_data['target']
        action = validated_data['action']
        validated_data['command'] = action.command.format(host=target.host)
        task = Task.objects.create(**validated_data)
        return task
