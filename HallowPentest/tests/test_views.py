from django.contrib.auth.models import User
from django.core.exceptions import ObjectDoesNotExist
from rest_framework import status
from rest_framework.test import APITestCase

from HallowPentest.models import (
    Action,
    Attacker,
    Credential,
    Parameter,
    Phase,
    Port,
    Service,
    Target,
    TargetService,
    Task,
    Tool,
    Vulnerability
)


class AttackerAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Attacker.objects.create(name=f'Attacker {x}', slug=f'attacker-{x}', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_attackers(self):
        # Unauthorized
        response = self.client.get('/api/pentest/attackers/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/attackers/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_attacker(self):
        data = {
            'name': 'Attacker',
            'slug': 'attacker',
            'host': '127.0.0.1',
            'ssh_port': 22,
            'ssh_username': 'username',
            'ssh_pkey': 'pkey'
        }
        # Unauthorized
        response = self.client.post('/api/pentest/attackers/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/attackers/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Attacker.objects.count(), 3)
        self.assertEqual(Attacker.objects.get(slug='attacker').name, 'Attacker')

    def test_update_attacker(self):
        attacker_1 = Attacker.objects.get(slug='attacker-1')
        data = {
            'name': 'Attacker X',
            'slug': 'attacker-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/attackers/{attacker_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/attackers/{attacker_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        attacker_1.refresh_from_db()
        self.assertEqual(attacker_1.name, data['name'])
        self.assertEqual(attacker_1.slug, data['slug'])

    def test_delete_attacker(self):
        attacker_1 = Attacker.objects.get(slug='attacker-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/attackers/{attacker_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/attackers/{attacker_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Attacker.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Attacker.objects.get(slug='attacker-1')


class PortAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Port.objects.create(slug=f'1337{x}-tcp', number=f'1337{x}', protocol='tcp')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_ports(self):
        # Unauthorized
        response = self.client.get('/api/pentest/ports/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/ports/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_port(self):
        data = {
            'slug': '13377-tcp',
            'number': 13377,
            'protocol': 'tcp',
        }
        # Unauthorized
        response = self.client.post('/api/pentest/ports/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/ports/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Port.objects.count(), 3)
        self.assertEqual(Port.objects.get(slug='13377-tcp').number, 13377)

    def test_update_port(self):
        port_1 = Port.objects.get(slug='13371-tcp')
        data = {
            'slug': '13377-tcp',
            'number': 13377
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/ports/{port_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/ports/{port_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        port_1.refresh_from_db()
        self.assertEqual(port_1.slug, data['slug'])
        self.assertEqual(port_1.number, data['number'])

    def test_delete_port(self):
        port_1 = Port.objects.get(slug='13371-tcp')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/ports/{port_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/ports/{port_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Port.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Port.objects.get(slug='13371-tcp')


class ServiceAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Service.objects.create(name=f'Service {x}', slug=f'service-{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_services(self):
        # Unauthorized
        response = self.client.get('/api/pentest/services/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/services/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_service(self):
        data = {
            'name': 'Service',
            'slug': 'service',
            'default_ports': None
        }
        # Unauthorized
        response = self.client.post('/api/pentest/services/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/services/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Service.objects.count(), 3)
        self.assertEqual(Service.objects.get(slug='service').name, 'Service')

    def test_update_service(self):
        service_1 = Service.objects.get(slug='service-1')
        data = {
            'name': 'Service X',
            'slug': 'service-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/services/{service_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/services/{service_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        service_1.refresh_from_db()
        self.assertEqual(service_1.name, data['name'])
        self.assertEqual(service_1.slug, data['slug'])

    def test_delete_service(self):
        service_1 = Service.objects.get(slug='service-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/services/{service_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/services/{service_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Service.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Service.objects.get(slug='service-1')


class TargetAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Target.objects.create(name=f'Target {x}', slug=f'target-{x}', host='127.0.0.1')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_targets(self):
        # Unauthorized
        response = self.client.get('/api/pentest/targets/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/targets/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_target(self):
        data = {
            'name': 'Target',
            'slug': 'target',
            'host': '127.0.0.1'
        }
        # Unauthorized
        response = self.client.post('/api/pentest/targets/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/targets/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Target.objects.count(), 3)
        self.assertEqual(Target.objects.get(slug='target').name, 'Target')

    def test_update_target(self):
        target_1 = Target.objects.get(slug='target-1')
        data = {
            'name': 'Target X',
            'slug': 'target-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/targets/{target_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/targets/{target_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        target_1.refresh_from_db()
        self.assertEqual(target_1.name, data['name'])
        self.assertEqual(target_1.slug, data['slug'])

    def test_delete_target(self):
        target_1 = Target.objects.get(slug='target-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/targets/{target_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/targets/{target_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Target.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Target.objects.get(slug='target-1')


class TargetServiceAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            target = Target.objects.create(name=f'Target {x}', slug=f'target-{x}', host='127.0.0.1')
            service = Service.objects.create(name=f'Service {x}', slug=f'service-{x}')
            port = Port.objects.create(slug=f'1337{x}-tcp', number=f'1337{x}', protocol='tcp')
            TargetService.objects.create(target=target, service=service, port=port)

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_targets_services(self):
        # Unauthorized
        response = self.client.get('/api/pentest/targets_services/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/targets_services/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_target_service(self):
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        service = Service.objects.create(name='Service', slug='service')
        port = Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')
        data = {
            'target_id': target.id,
            'service_id': service.id,
            'port_id': port.id
        }
        # Unauthorized
        response = self.client.post('/api/pentest/targets_services/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/targets_services/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(TargetService.objects.count(), 3)
        self.assertEqual(TargetService.objects.get(target=target, service=service, port=port).id, response.data['id'])

    def test_update_target_service(self):
        target_1 = Target.objects.get(slug='target-1')
        service_1 = Service.objects.get(slug='service-1')
        port_1 = Port.objects.get(slug='13371-tcp')
        target_service_1 = TargetService.objects.get(target=target_1, service=service_1, port=port_1)
        target = Target.objects.create(name='Target x', slug='target-x', host='127.0.0.1')
        service = Service.objects.create(name='Service x', slug='service-x')
        port = Port.objects.create(slug='13377-tcp', number='13377', protocol='tcp')
        data = {
            'target_id': target.id,
            'service_id': service.id,
            'port_id': port.id
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/targets_services/{target_service_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/targets_services/{target_service_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        target_service_1.refresh_from_db()
        self.assertEqual(target_service_1.target.id, data['target_id'])
        self.assertEqual(target_service_1.service.id, data['service_id'])
        self.assertEqual(target_service_1.port.id, data['port_id'])

    def test_delete_target_service(self):
        target_1 = Target.objects.get(slug='target-1')
        service_1 = Service.objects.get(slug='service-1')
        port_1 = Port.objects.get(slug='13371-tcp')
        target_service_1 = TargetService.objects.get(target=target_1, service=service_1, port=port_1)

        # Unauthorized
        response = self.client.delete(f'/api/pentest/targets_services/{target_service_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/targets_services/{target_service_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(TargetService.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            TargetService.objects.get(target=target_1, service=service_1, port=port_1)


class CredentialAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Credential.objects.create(cred_type='plaintext', username=f'username_{x}', password=f'password_{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_credentials(self):
        # Unauthorized
        response = self.client.get('/api/pentest/credentials/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/credentials/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_credential(self):
        data = {
            'target_id': None,
            'service_id': None,
            'cred_type': 'plaintext',
            'username': 'username',
            'password': 'password'
        }
        # Unauthorized
        response = self.client.post('/api/pentest/credentials/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/credentials/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Credential.objects.count(), 3)
        self.assertEqual(Credential.objects.get(username='username', password='password').id, response.data['id'])

    def test_update_credential(self):
        credential_1 = Credential.objects.get(username='username_1', password='password_1')
        data = {
            'username': 'username_x',
            'password': 'password_x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/credentials/{credential_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/credentials/{credential_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        credential_1.refresh_from_db()
        self.assertEqual(credential_1.username, data['username'])
        self.assertEqual(credential_1.password, data['password'])

    def test_delete_credential(self):
        credential_1 = Credential.objects.get(username='username_1', password='password_1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/credentials/{credential_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/credentials/{credential_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Credential.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Credential.objects.get(username='username_1', password='password_1')


class PhaseAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Phase.objects.create(name=f'Phase {x}', slug=f'phase-{x}', sequence=1)

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_phases(self):
        # Unauthorized
        response = self.client.get('/api/pentest/phases/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/phases/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_phase(self):
        data = {
            'name': 'Phase',
            'slug': 'phase',
            'sequence': 1
        }
        # Unauthorized
        response = self.client.post('/api/pentest/phases/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/phases/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Phase.objects.count(), 3)
        self.assertEqual(Phase.objects.get(slug='phase').name, 'Phase')

    def test_update_phase(self):
        phase_1 = Phase.objects.get(slug='phase-1')
        data = {
            'name': 'Phase X',
            'slug': 'phase-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/phases/{phase_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/phases/{phase_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        phase_1.refresh_from_db()
        self.assertEqual(phase_1.name, data['name'])
        self.assertEqual(phase_1.slug, data['slug'])

    def test_delete_phase(self):
        phase_1 = Phase.objects.get(slug='phase-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/phases/{phase_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/phases/{phase_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Phase.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Phase.objects.get(slug='phase-1')


class VulnerabilityAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Vulnerability.objects.create(name=f'Vulnerability {x}', slug=f'vulnerability-{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_vulnerabilities(self):
        # Unauthorized
        response = self.client.get('/api/pentest/vulnerabilities/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/vulnerabilities/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_vulnerability(self):
        data = {
            'name': 'Vulnerability',
            'slug': 'vulnerability'
        }
        # Unauthorized
        response = self.client.post('/api/pentest/vulnerabilities/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/vulnerabilities/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Vulnerability.objects.count(), 3)
        self.assertEqual(Vulnerability.objects.get(slug='vulnerability').name, 'Vulnerability')

    def test_update_vulnerability(self):
        vulnerability_1 = Vulnerability.objects.get(slug='vulnerability-1')
        data = {
            'name': 'Vulnerability X',
            'slug': 'vulnerability-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/vulnerabilities/{vulnerability_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/vulnerabilities/{vulnerability_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        vulnerability_1.refresh_from_db()
        self.assertEqual(vulnerability_1.name, data['name'])
        self.assertEqual(vulnerability_1.slug, data['slug'])

    def test_delete_vulnerability(self):
        vulnerability_1 = Vulnerability.objects.get(slug='vulnerability-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/vulnerabilities/{vulnerability_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/vulnerabilities/{vulnerability_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Vulnerability.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Vulnerability.objects.get(slug='vulnerability-1')


class ToolAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Tool.objects.create(name=f'Tool {x}', slug=f'tool-{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_tools(self):
        # Unauthorized
        response = self.client.get('/api/pentest/tools/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/tools/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_tool(self):
        data = {
            'name': 'Tool',
            'slug': 'tool'
        }
        # Unauthorized
        response = self.client.post('/api/pentest/tools/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/tools/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Tool.objects.count(), 3)
        self.assertEqual(Tool.objects.get(slug='tool').name, 'Tool')

    def test_update_tool(self):
        tool_1 = Tool.objects.get(slug='tool-1')
        data = {
            'name': 'Tool X',
            'slug': 'tool-x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/tools/{tool_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/tools/{tool_1.slug}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        tool_1.refresh_from_db()
        self.assertEqual(tool_1.name, data['name'])
        self.assertEqual(tool_1.slug, data['slug'])

    def test_delete_tool(self):
        tool_1 = Tool.objects.get(slug='tool-1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/tools/{tool_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/tools/{tool_1.slug}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Tool.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Tool.objects.get(slug='tool-1')


class ParameterAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            Parameter.objects.create(name=f'Parameter {x}', key=f'key_{x}', value=f'value_{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_parameters(self):
        # Unauthorized
        response = self.client.get('/api/pentest/parameters/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/parameters/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_parameter(self):
        data = {
            'name': 'Parameter',
            'key': 'key',
            'value': 'value',
            'target_id': None,
            'tool_id': None
        }
        # Unauthorized
        response = self.client.post('/api/pentest/parameters/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/parameters/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Parameter.objects.count(), 3)
        self.assertEqual(Parameter.objects.get(key='key', value='value').name, 'Parameter')

    def test_update_parameter(self):
        parameter_1 = Parameter.objects.get(name='Parameter 1')
        data = {
            'name': 'Parameter X',
            'key': 'key_x',
            'value': 'value_x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/parameters/{parameter_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/parameters/{parameter_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        parameter_1.refresh_from_db()
        self.assertEqual(parameter_1.name, data['name'])
        self.assertEqual(parameter_1.key, data['key'])
        self.assertEqual(parameter_1.value, data['value'])

    def test_delete_parameter(self):
        parameter_1 = Parameter.objects.get(key='key_1', value='value_1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/parameters/{parameter_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/parameters/{parameter_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Parameter.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Parameter.objects.get(key='key_1', value='value_1')


class ActionAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            phase = Phase.objects.create(name=f'Phase {x}', slug=f'phase-{x}', sequence=1)
            tool = Tool.objects.create(name=f'Tool {x}', slug=f'tool-{x}')
            Action.objects.create(name=f'Action {x}', phase=phase, tool=tool, command='cmd_{x}', priority=x)

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_actions(self):
        # Unauthorized
        response = self.client.get('/api/pentest/actions/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/actions/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)

    def test_create_action(self):
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        data = {
            'name': 'Action',
            'phase_id': phase.id,
            'service_id': None,
            'vulnerability_id': None,
            'tool_id': tool.id,
            'command': 'cmd',
            'priority': 1
        }
        # Unauthorized
        response = self.client.post('/api/pentest/actions/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/actions/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Action.objects.count(), 3)
        self.assertEqual(Action.objects.get(name='Action').id, response.data['id'])

    def test_update_action(self):
        action_1 = Action.objects.get(name='Action 1')
        phase = Phase.objects.create(name='Phase X', slug='phase-x', sequence=1)
        tool = Tool.objects.create(name='Tool X', slug='tool-x')
        data = {
            'name': 'Action X',
            'phase_id': phase.id,
            'tool_id': tool.id,
            'command': 'cmd_x'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/actions/{action_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/actions/{action_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        action_1.refresh_from_db()
        self.assertEqual(action_1.name, data['name'])
        self.assertEqual(action_1.phase.id, data['phase_id'])
        self.assertEqual(action_1.tool.id, data['tool_id'])

    def test_delete_action(self):
        action_1 = Action.objects.get(name='Action 1')
        # Unauthorized
        response = self.client.delete(f'/api/pentest/actions/{action_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/actions/{action_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Action.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Action.objects.get(name='Action 1')


class TaskAPITestCase(APITestCase):

    def setUp(self):
        for x in range(1, 3):
            attacker = Attacker.objects.create(name=f'Attacker {x}', slug=f'attacker-{x}', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
            target = Target.objects.create(name=f'Target {x}', slug=f'target-{x}', host='127.0.0.1')
            phase = Phase.objects.create(name=f'Phase {x}', slug=f'phase-{x}', sequence=1)
            tool = Tool.objects.create(name=f'Tool {x}', slug=f'tool-{x}')
            action = Action.objects.create(name=f'Action {x}', phase=phase, tool=tool, command=f'cmd_{x}', priority=1)
            Task.objects.create(attacker=attacker, target=target, action=action, command=f'cmd_{x}')

    def authenticate_user(self):
        user = User.objects.create_user('user', 'user@user.tld', 'password')
        self.client.force_authenticate(user=user)

    def test_list_tasks(self):
        # Unauthorized
        response = self.client.get('/api/pentest/tasks/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/tasks/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 2)
        self.assertEqual(len(response.data['results']), 2)

    def test_list_tasks_with_filters(self):
        # Authorized
        self.authenticate_user()

        # command_or_output
        response = self.client.get('/api/pentest/tasks/?command_or_output=x')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 0)
        self.assertEqual(len(response.data['results']), 0)

        response = self.client.get('/api/pentest/tasks/?command_or_output=1')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['count'], 1)
        self.assertEqual(len(response.data['results']), 1)

    def test_create_task(self):
        attacker = Attacker.objects.create(name='Attacker', slug='attacker', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
        target = Target.objects.create(name='Target', slug='target', host='127.0.0.1')
        phase = Phase.objects.create(name='Phase', slug='phase', sequence=1)
        tool = Tool.objects.create(name='Tool', slug='tool')
        action = Action.objects.create(name='Action', phase=phase, tool=tool, command='cmd', priority=1)
        data = {
            'attacker_id': attacker.id,
            'target_id': target.id,
            'target_service_id': None,
            'credential_id': None,
            'action_id': action.id
        }
        # Unauthorized
        response = self.client.post('/api/pentest/tasks/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/tasks/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(Task.objects.count(), 3)
        self.assertEqual(Task.objects.get(attacker=attacker, target=target, action=action).id, response.data['id'])

    def test_update_task(self):
        attacker_1 = Attacker.objects.get(slug='attacker-1')
        target_1 = Target.objects.get(slug='target-1')
        action_1 = Action.objects.get(name='Action 1')
        task_1 = Task.objects.get(attacker=attacker_1, target=target_1, action=action_1)
        attacker = Attacker.objects.create(name='Attacker X', slug='attacker-x', host='127.0.0.1', ssh_port=22, ssh_username='username', ssh_pkey='pkey')
        target = Target.objects.create(name='Target X', slug='target-x', host='127.0.0.1')
        phase = Phase.objects.create(name='Phase X', slug='phase-x', sequence=1)
        tool = Tool.objects.create(name='Tool X', slug='tool-x')
        action = Action.objects.create(name='Action X', phase=phase, tool=tool, command='cmd', priority=1)
        data = {
            'attacker_id': attacker.id,
            'target_id': target.id,
            'action_id': action.id,
            'command': 'cmd'
        }
        # Unauthorized
        response = self.client.patch(f'/api/pentest/tasks/{task_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.patch(f'/api/pentest/tasks/{task_1.id}/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        task_1.refresh_from_db()
        self.assertEqual(task_1.attacker.id, data['attacker_id'])
        self.assertEqual(task_1.target.id, data['target_id'])
        self.assertEqual(task_1.action.id, data['action_id'])

    def test_delete_task(self):
        attacker_1 = Attacker.objects.get(slug='attacker-1')
        target_1 = Target.objects.get(slug='target-1')
        action_1 = Action.objects.get(name='Action 1')
        task_1 = Task.objects.get(attacker=attacker_1, target=target_1, action=action_1)
        # Unauthorized
        response = self.client.delete(f'/api/pentest/tasks/{task_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.delete(f'/api/pentest/tasks/{task_1.id}/')
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertEqual(Task.objects.count(), 1)
        with self.assertRaises(ObjectDoesNotExist):
            Task.objects.get(attacker=attacker_1, target=target_1, action=action_1)

    def test_task_command(self):
        attacker_1 = Attacker.objects.get(slug='attacker-1')
        target_1 = Target.objects.get(slug='target-1')
        phase_1 = Phase.objects.get(slug='phase-1')
        tool_1 = Tool.objects.get(slug='tool-1')
        service = Service.objects.create(name='Service', slug='service')
        port = Port.objects.create(slug='1337-tcp', number='1337', protocol='tcp')
        target_service = TargetService.objects.create(target=target_1, service=service, port=port)
        credential = Credential.objects.create(cred_type='plaintext', username='username', password='password')
        action = Action.objects.create(name='Action', phase=phase_1, tool=tool_1, command='{username}:{password}@{host}:{port} -{param_h}', priority=1)
        Parameter.objects.create(name='Parameter', key='param_h', value='h')
        data = {
            'attacker_id': attacker_1.id,
            'target_id': target_1.id,
            'target_service_id': target_service.id,
            'credential_id': credential.id,
            'action_id': action.id
        }
        # Unauthorized
        response = self.client.post('/api/pentest/tasks/task_command/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.post('/api/pentest/tasks/task_command/', data, format='json')
        self.assertEqual(response.data, 'username:password@127.0.0.1:1337 -h')

        action.command = '{username}:{password}@{host}:{port} -{param_z}'
        action.save()
        with self.assertRaises(ObjectDoesNotExist):
            self.client.post('/api/pentest/tasks/task_command/', data, format='json')

    def test_tasks_results(self):
        # Unauthorized
        response = self.client.get('/api/pentest/tasks/tasks_results/')
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)

        # Authorized
        self.authenticate_user()
        response = self.client.get('/api/pentest/tasks/tasks_results/')
        self.assertEqual(response.data, [{
            'celery_task_id': '', 'task_id': task.id, 'state': 'PENDING', 'output': ''
        } for task in Task.objects.all()])
